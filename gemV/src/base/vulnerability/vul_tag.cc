/*
 * Copyright (c) 20014-15 Arizona State University
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met: redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer;
 * redistributions in binary form must reproduce the above copyright
 * notice, this list of conditions and the following disclaimer in the
 * documentation and/or other materials provided with the distribution;
 * neither the name of the copyright holders nor the names of its
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Authors: Srinivas Tanikella
 *
 *	    Compiler and Microarchitecture Lab, ASU
 * 	    http://aviral.lab.asu.edu
 */

#include "base/vulnerability/vul_tag.hh"
#include <math.h>

void
TagVulCalc::vulOnInsert(CacheBlk *blk)
{
    /** Set incoming event and tick */
    blk->tagVulHist.t = curTick();
    blk->tagVulHist.incomingTick = curTick();
    blk->tagVulHist.op = INCOMING;

}

void 
TagVulCalc::vulOnAccess(CacheSet<CacheBlk> *set, Addr tag)
{
    for(unsigned i = 0; i < set->assoc; ++i) {
        CacheBlk *blk = set->blks[i];
        blk->tagVulHist.op = TAGCOMPARE;

        if(hammingDistance(tag, blk->tag) <= 1)
            blk->tagVulHist.uncertain = curTick() - blk->tagVulHist.incomingTick;

        blk->tagVulHist.t = curTick();
    }
}

long
TagVulCalc::vulOnEvict(CacheBlk *blk)
{
    long vulTime = 0;

    if(blk->tagVulHist.incomingTick == -1)
        return 0;

    blk->tagVulHist.op = EVICTION;
    if(blk->isDirty()) {
        vulTime = curTick() - blk->tagVulHist.incomingTick;
    } else {
        vulTime = blk->tagVulHist.uncertain;
    }
    blk->tagVulHist.uncertain = 0;
    blk->tagVulHist.incomingTick = -1;
    return (vulTime/TICKS_PER_CYCLE)*tag_size;
}
    
