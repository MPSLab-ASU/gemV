/*
 * Copyright (c) 20014-15 Arizona State University
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met: redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer;
 * redistributions in binary form must reproduce the above copyright
 * notice, this list of conditions and the following disclaimer in the
 * documentation and/or other materials provided with the distribution;
 * neither the name of the copyright holders nor the names of its
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Authors: Reiley Jeyapaul,
 *	    Srinivas Tanikella
 *
 *	    Compiler and Microarchitecture Lab, ASU
 * 	    http://aviral.lab.asu.edu
 */

/** @file
 * Vulnerability definitions, and common functions used in computations across the simulator.
 */

#ifndef __VUL__MAIN__HH__
#define __VUL__MAIN__HH__

#include "sim/core.hh"
#include "base/types.hh"
#include "sim/system.hh"
#include "base/vulnerability/hamming.hh"
#include "base/statistics.hh"

/**
 * Global Variable declarations.
 */

/** Enable (TRUE)/Disable(FALSE) flag for vulnerability analysis */
//bool EnableVulAnalysis;


/**
 * Datastructure declarations.
 */


/**
 * VUL_CACHE : Datastructures used for cache vulnerability computations.
 *
 */

/** Defining the type of cache-access on the cache-block.*/
enum Operation {
	INVALID,
	READ,
    	TAGCOMPARE,
	WRITE,
	INCOMING,
	EVICTION
};

/** Defining the enum for cache-type.*/
enum
{
	ICACHE,
	DCACHE
};


#define TICKS_PER_CYCLE 500

/** Number of protection modes.*/
#define NUM_PROTECTION 5

/** Word size */
// TODO: Find a more elegant way to get the word size. Hard-coding for now.
#define WORD_SIZE 16
#define ADDRESS_SPACE_SIZE 32

///** Defining the type of the protection mode enabled in the simulation. */
typedef unsigned int Protection_Mode;

#define	PARITY_BLOCK 0
#define PARITY_WORD 1
#define ECC_BLOCK 2
#define ECC_WORD 3
#define NO_PROTECTION 4


/* Define size of entries */
/* See sizes.xls to understand the reasoning behind these sizes */
/* Rename map entry size */

#define ARCH_IDX_WIDTH 4
#define MEM_DATA_WIDTH 512
#define PHY_IDX_WIDTH 8
#define REGISTER_WIDTH 32
#define PC_WIDTH 24
#define OPCODE_WIDTH 8
#define SEQNUM_WIDTH 32
#define FLAGS_WIDTH 15
#define FAULT_WIDTH 5
#define RENAME_MAP_ENTRY_SIZE 14
#define IQ_ENTRY_SIZE 41
#define LSQ_ENTRY_SIZE 41
#define ROB_ENTRY_SIZE 41
#define INT_REG_SIZE 32
#define FLOAT_REG_SIZE 32
#define TLB_ENTRY_SIZE 48
#define HIST_BUF_ENTRY_SIZE 23
#define TAG_BITS 6
#define MSHR_ENTRY_SIZE 20



/** Container structure for data regarding the list of accesses to the cache blocks. */
class History
{
  public:
	Tick t;			// Tick at which the access takes place
	Operation op;		// Operation type. Can be - INVALID, READ, WRITE, INCOMING, EVICTION.
	Tick uncertain;		// For future use.
	Tick prevTick;		// For future use.
	Tick incomingTick;	// Tick at which the incoming access takes place. Used for Cache and Register accesses.

    	int seqNum;		// Sequence number of the instruction associated with this access.

	History()
	  :t(-1), op(INVALID), uncertain(0), incomingTick(-1)
	{ }
};


#endif // __VUL__MAIN__HH__

