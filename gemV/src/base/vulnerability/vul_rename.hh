/*
 * Copyright (c) 20014-15 Arizona State University
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met: redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer;
 * redistributions in binary form must reproduce the above copyright
 * notice, this list of conditions and the following disclaimer in the
 * documentation and/or other materials provided with the distribution;
 * neither the name of the copyright holders nor the names of its
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Authors: Srinivas Tanikella
 *
 *	    Compiler and Microarchitecture Lab, ASU
 * 	    http://aviral.lab.asu.edu
 */

#ifndef __VUL_RENAME_HH__
#define __VUL_RENAME_HH__

#include "cpu/o3/comm.hh"
#include "base/vulnerability/vul_main.hh"
#include "base/statistics.hh"
#include "debug/VulTracker.hh"
#include "base/vulnerability/vul_structs.hh"

#include <vector>

class RenameVulCalc {

private:
    
    /** Size of a field in the rename map */
    const int size;

    /** Size of a field in the History buffer */
    const int hist_size;

    /** Number of threads */
    const int numThreads;
    
    /** Number of entries in the rename map */
    const int numEntries;
        
    /** Number of entries in the History buffer */
    const int numHistEntries;

    std::list<History> **hist;
    std::list<History> **bufHist;

    Tick **prevTick;
    Tick **hbPrevTick;

    Stats::Scalar renameVul;
    Stats::Scalar histbufVul;

public:
    
    RenameVulCalc(int, int);

    ~RenameVulCalc();

    void vulOnRead(PhysRegIndex phys_reg, InstSeqNum seqNum, int tid);    

    void vulOnReadHB(PhysRegIndex phys_reg, InstSeqNum seqNum, int tid);    

    void vulOnWrite(PhysRegIndex phys_reg, InstSeqNum seqNum, int tid);

    void vulOnWriteHB(PhysRegIndex phys_reg, InstSeqNum seqNum, int tid);

    void vulOnCommit(InstSeqNum seqNum, int tid);

    void vulOnCommitHB(InstSeqNum seqNum, int tid);

    void vulOnRemove(InstSeqNum seqNum, int tid);

    void vulOnSquash(InstSeqNum, int);   

    void regStats(); 
};

#endif  //__VUL_RENAME_HH_
