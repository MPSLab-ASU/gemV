/*
 * Copyright (c) 20014-15 Arizona State University
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met: redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer;
 * redistributions in binary form must reproduce the above copyright
 * notice, this list of conditions and the following disclaimer in the
 * documentation and/or other materials provided with the distribution;
 * neither the name of the copyright holders nor the names of its
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Authors: Srinivas Tanikella
 *
 *	    Compiler and Microarchitecture Lab, ASU
 * 	    http://aviral.lab.asu.edu
 */

#include "base/vulnerability/vul_rob.hh"
#include "debug/VulTrackerROB.hh"

RobVulCalc::RobVulCalc(int entries, int threads)
{
    numEntries = entries;
    numThreads = threads;
    
    //hist.resize(numThreads);

    hist = new History*[threads];

    for(int i = 0; i < numThreads; ++i) {
        hist[i] = new History[entries];
        for(int j = 0; j < numEntries; ++j) {
            History h;
            hist[i][j] = h;
        }
    }

    robWidth = SEQNUM_WIDTH;
}

RobVulCalc::~RobVulCalc()
{
    for(int i = 0; i < numThreads; ++i)
        delete [] hist[i];

    delete [] hist;
}

void
RobVulCalc::vulOnInsert(int idx, int tid, int seqNum)
{
    assert(idx < numEntries);
    assert(tid < numThreads);
    
    DPRINTF(VulTrackerROB,"VulTracker ROB: [sn:%i]: Write to %d\n", seqNum, idx);

    hist[tid][idx].incomingTick = curTick();
    hist[tid][idx].seqNum = seqNum;
    hist[tid][idx].t = curTick();
    hist[tid][idx].op = WRITE;
}

void
RobVulCalc::vulOnCommit(int tid, int seqNum)
{
    assert(tid < numThreads);
    for(int i = 0; i < numEntries; i++) {
        if(hist[tid][i].seqNum == seqNum && hist[tid][i].incomingTick != -1) {
            robVul += robWidth*(curTick() - hist[tid][i].incomingTick)/TICKS_PER_CYCLE;
            DPRINTF(VulTrackerROB,"VulTracker ROB: [sn:%i]: Vulnerable from %lu to %lu\n",seqNum,
                                                    hist[tid][i].incomingTick, curTick());
        }
    }
}

void
RobVulCalc::vulOnSquash(int tid, int seqNum)
{
    assert(tid < numThreads);
    for(int i = 0; i < numEntries; i++) {
        if(hist[tid][i].seqNum == seqNum) {
            DPRINTF(VulTrackerROB,"VulTracker ROB: [sn:%i]: Squash %d\n", seqNum, i);
            hist[tid][i].incomingTick = -1;
            hist[tid][i].seqNum = -1;
            break;
        }
    }
}

void
RobVulCalc::regStats()
{
    using namespace Stats;

    robVul
        .name("vulnerability.rob")
        .desc("ROB Vulnerability in bit-cycles");
}
