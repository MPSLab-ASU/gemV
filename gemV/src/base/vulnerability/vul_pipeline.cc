/*
 * Copyright (c) 20014-15 Arizona State University
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met: redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer;
 * redistributions in binary form must reproduce the above copyright
 * notice, this list of conditions and the following disclaimer in the
 * documentation and/or other materials provided with the distribution;
 * neither the name of the copyright holders nor the names of its
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Authors: Srinivas Tanikella
 *
 *	    Compiler and Microarchitecture Lab, ASU
 * 	    http://aviral.lab.asu.edu
 */

#include "base/vulnerability/vul_pipeline.hh"

PipeVulTracker::PipeVulTracker()
{
    fetchQ.name = "fetchqueue";
    fetchQ.vul = 0;

    decodeQ.name = "decodequeue";
    decodeQ.vul = 0;

    renameQ.name = "renamequeue";
    renameQ.vul = 0;

    i2eQ.name = "i2equeue";
    i2eQ.vul = 0;

    iewQ.name = "iewqueue";
    iewQ.vul = 0;

    iq.name ="instqueue";
    iq.vul = 0;

    lsq.name = "lsqueue";
    lsq.vul = 0;

    Field f;
    f.size = SEQNUM_WIDTH;
    f.f = INST_SEQNUM;
    f.name = "seqnum";

    fetchQ.fields.push_back(f);
    decodeQ.fields.push_back(f);
    renameQ.fields.push_back(f);
    i2eQ.fields.push_back(f);
    iewQ.fields.push_back(f);
    iq.fields.push_back(f);
    lsq.fields.push_back(f);

    f.f = INST_OPCODE;
    f.size = OPCODE_WIDTH;
    f.name = "opcode";

    fetchQ.fields.push_back(f);
    decodeQ.fields.push_back(f);
    renameQ.fields.push_back(f);
    i2eQ.fields.push_back(f);
    iq.fields.push_back(f);
    lsq.fields.push_back(f);

    f.f = INST_PC;
    f.size = PC_WIDTH;
    f.name = "pc";

    fetchQ.fields.push_back(f);
    decodeQ.fields.push_back(f);
    renameQ.fields.push_back(f);
    i2eQ.fields.push_back(f);
    iewQ.fields.push_back(f);
    iq.fields.push_back(f);
    lsq.fields.push_back(f);

    f.f = INST_ARCHDESTREGSIDX;
    f.size = ARCH_IDX_WIDTH;
    f.name = "archdestregidx";

    fetchQ.fields.push_back(f);
    decodeQ.fields.push_back(f);

    f.f = INST_ARCHSRCREGSIDX;
    f.size = ARCH_IDX_WIDTH;
    f.name = "archsrcregidx";

    fetchQ.fields.push_back(f);
    decodeQ.fields.push_back(f);

    f.f = INST_FLAGS;
    f.size = FLAGS_WIDTH;
    f.name = "flags";

    fetchQ.fields.push_back(f);
    decodeQ.fields.push_back(f);
    renameQ.fields.push_back(f);
    i2eQ.fields.push_back(f);
    iewQ.fields.push_back(f);
    iq.fields.push_back(f);
    lsq.fields.push_back(f);

    f.f = INST_PHYSRCREGSIDX;
    f.size = PHY_IDX_WIDTH;
    f.name = "physrcregidx";

    renameQ.fields.push_back(f);
    i2eQ.fields.push_back(f);
    iq.fields.push_back(f);
    lsq.fields.push_back(f);

    f.f = INST_PHYDESTREGSIDX;
    f.size = PHY_IDX_WIDTH;
    f.name = "phydestregidx";

    renameQ.fields.push_back(f); 
    i2eQ.fields.push_back(f);
    iq.fields.push_back(f);
    lsq.fields.push_back(f);

    f.f = INST_MEMDATA;
    f.size = MEM_DATA_WIDTH;
    f.name = "memdata";
}

void
PipeVulTracker::vulOnWrite(PipeStruct s, InstField f, InstSeqNum seqNum)
{
    pStructure *st = selectStruct(s);

    assert(st != NULL);

    std::list<Field>::iterator fit = st->fields.begin();

    while(fit != st->fields.end()) {

        if(fit->f == f)
            break;

        fit++;
    }
    
    assert(fit != st->fields.end());

    DPRINTF(VulTracker,"Vultracker: [sn:%i]: %s Write called on field %s\n",seqNum, st->name, fit->name);

    fit->hist[seqNum].op = WRITE;
    fit->hist[seqNum].t = curTick();
    fit->hist[seqNum].incomingTick = curTick();
    fit->writes++;
}

void
PipeVulTracker::vulOnRead(PipeStruct s, InstField f, InstSeqNum seqNum)
{
    pStructure *st = selectStruct(s);

    assert(st != NULL);
    
    std::list<Field>::iterator fit = st->fields.begin();

    while(fit != st->fields.end()) {

        if(fit->f == f)
            break;

        fit++;
    }

    assert(fit != st->fields.end());

    assert(fit->hist[seqNum].t != -1);

    //st->vul += fit->size*(curTick() - fit->hist[seqNum].t)/TICKS_PER_CYCLE;

    if(fit->hist[seqNum].op == WRITE || fit->hist[seqNum].op == READ) {
        DPRINTF(VulTracker,"Vultracker: [sn:%i]: %s Read called on field %s. Making pair %lu %lu\n", 
                            seqNum, st->name, fit->name, fit->hist[seqNum].t, curTick());

        fit->vulIntervals[seqNum].push_back(std::make_pair(fit->hist[seqNum].t, curTick()));
    }

    fit->hist[seqNum].op = READ;
    fit->hist[seqNum].t = curTick();
    fit->reads++;
}

void
PipeVulTracker::vulOnCommit(PipeStruct s, InstSeqNum seqNum, int numSrc, int numDest)
{
    pStructure *st = selectStruct(s);

    assert(st != NULL);

    std::list<Field>::iterator fit = st->fields.begin();

    while(fit != st->fields.end()) {

        if(fit->hist[seqNum].t == -1){
            fit++;
            continue;
        }

        VulIntervals::iterator vit = fit->vulIntervals[seqNum].begin();

        while(vit != fit->vulIntervals[seqNum].end()) {

           DPRINTF(VulTracker,"Vultracker: [sn:%i]: %s commit. %s vulnerable from %lu to %lu\n",
                                        seqNum, st->name, fit->name, vit->first, vit->second);
           if(fit->f == INST_ARCHSRCREGSIDX)
               st->vul += numSrc*fit->size*(vit->second - vit->first)/TICKS_PER_CYCLE;
           else if(fit->f == INST_ARCHDESTREGSIDX)
               st->vul += numDest*fit->size*(vit->second - vit->first)/TICKS_PER_CYCLE;
           else
               st->vul += fit->size*(vit->second - vit->first)/TICKS_PER_CYCLE;

           vit++;
        }
        fit->vulIntervals.erase(seqNum);
        fit++;

    }
}
                
void
PipeVulTracker::vulOnSquash(PipeStruct s, InstSeqNum seqNum)
{
    pStructure *st = selectStruct(s);

    assert(st != NULL);

    std::list<Field>::iterator fit = st->fields.begin();

    DPRINTF(VulTracker,"Vultracker: [sn:%i]: %s squash\n",seqNum, st->name);

    while(fit != st->fields.end()) {

        fit->vulIntervals.erase(seqNum);
        fit->hist.erase(seqNum);

        fit++;

    }
}

pStructure*
PipeVulTracker::selectStruct(PipeStruct s)
{
    pStructure *st;

    switch(s) {

        case P_FETCHQ:
            st = &fetchQ;
            break;

        case P_DECODEQ:
            st = &decodeQ;
            break;

        case P_RENAMEQ:
            st = &renameQ;
            break;

        case P_I2EQ:
            st = &i2eQ;
            break;

        case P_IEWQ:
            st = &iewQ;
            break;

        case P_IQ:
            st = &iq;
            break;

        case P_LSQ:
            st = &lsq;
            break;

        default:
            st = NULL;
            break;
    }

    return st;
}

void
PipeVulTracker::regStats()
{
    fetchQ.vul
        .name("vulnerability.fetch_queue")
        .desc("Vulnerability of Fetch Queue in bit-cycles");

    decodeQ.vul
        .name("vulnerability.decode_queue")
        .desc("Vulnerability of Decode Queue in bit-cycles");
    
    renameQ.vul
        .name("vulnerability.rename_queue")
        .desc("Vulnerability of Rename Queue in bit-cycles");
    
    i2eQ.vul
        .name("vulnerability.i2e_queue")
        .desc("Vulnerability of IssueToExec Queue in bit-cycles");
    
    iewQ.vul
        .name("vulnerability.iew_queue")
        .desc("Vulnerability of IEW Queue in bit-cycles");

    iq.vul
        .name("vulnerability.inst_queue")
        .desc("Vulnerability of Instruction Queue in bit-cycles");

    lsq.vul
        .name("vulnerability.ls_queue")
        .desc("Vulnerability of Load/Store Queue in bit-cycles");
}
