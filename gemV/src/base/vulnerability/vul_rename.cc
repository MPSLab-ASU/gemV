/*
 * Copyright (c) 20014-15 Arizona State University
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met: redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer;
 * redistributions in binary form must reproduce the above copyright
 * notice, this list of conditions and the following disclaimer in the
 * documentation and/or other materials provided with the distribution;
 * neither the name of the copyright holders nor the names of its
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Authors: Srinivas Tanikella
 *
 *	    Compiler and Microarchitecture Lab, ASU
 * 	    http://aviral.lab.asu.edu
 */

#include "base/vulnerability/vul_rename.hh"

RenameVulCalc::RenameVulCalc(int numRegs, int numThreads)
    : size(RENAME_MAP_ENTRY_SIZE),
      hist_size(HIST_BUF_ENTRY_SIZE),
      numThreads(numThreads),
      numEntries(numRegs),
      numHistEntries(numRegs)
{
    hist = new std::list<History>*[numThreads];
    bufHist = new std::list<History>*[numThreads];

    prevTick = new Tick*[numThreads];
    hbPrevTick = new Tick*[numThreads];

    for(unsigned i = 0; i < numThreads; ++i) {
        hist[i] = new std::list<History>[numEntries];
        bufHist[i] = new std::list<History>[numEntries];
        prevTick[i] = new Tick[numEntries];
        hbPrevTick[i] = new Tick[numEntries];

        for(unsigned j = 0; j < numEntries; ++j) {
            prevTick[i][j] = -1;
            hbPrevTick[i][j] = -1;
        }

    }

}

RenameVulCalc::~RenameVulCalc()
{
    for(unsigned j = 0; j < numThreads; ++j) {
        delete [] hist[j];
        delete [] bufHist[j];
        delete [] prevTick[j];
    }

    delete [] hist;
    delete [] bufHist;
    delete [] prevTick;
}

void
RenameVulCalc::vulOnRead(PhysRegIndex phys_reg, InstSeqNum seqNum, int tid)
{
    if(phys_reg == 33)
        return;

    assert(phys_reg < numEntries);
    assert(tid < numThreads);

    DPRINTF(VulTracker, "Vultracker: [sn:%i]: Rename map %d read\n", seqNum, phys_reg);

    History h;
    h.t = curTick();
    
    h.op = READ;
    h.seqNum = seqNum;

    hist[tid][phys_reg].push_back(h);    
}

void
RenameVulCalc::vulOnReadHB(PhysRegIndex phys_reg, InstSeqNum seqNum, int tid)
{
    if(phys_reg == 33)
        return;

    assert(phys_reg < numEntries);
    assert(tid < numThreads);

    DPRINTF(VulTracker, "Vultracker: [sn:%i]: History buffer %d read\n", seqNum, phys_reg);

    History h;
    h.t = curTick();
    
    h.op = READ;
    h.seqNum = seqNum;

    bufHist[tid][phys_reg].push_back(h);    
}

void
RenameVulCalc::vulOnWrite(PhysRegIndex phys_reg, InstSeqNum seqNum, int tid)
{
    if(phys_reg == 33)
        return;

    assert(phys_reg < numEntries);
    assert(tid < numThreads);
   
    DPRINTF(VulTracker, "Vultracker: [sn:%i]: Rename map %d write\n", seqNum, phys_reg);
    
    History h;
    h.t = curTick();

    h.op = WRITE;
    h.seqNum = seqNum;

    hist[tid][phys_reg].push_back(h);
}

void
RenameVulCalc::vulOnWriteHB(PhysRegIndex phys_reg, InstSeqNum seqNum, int tid)
{
    if(phys_reg == 33)
        return;

    assert(phys_reg < numEntries);
    assert(tid < numThreads);
   
    DPRINTF(VulTracker, "Vultracker: [sn:%i]: History buffer %d write\n", seqNum, phys_reg);
    
    History h;
    h.t = curTick();

    h.op = WRITE;
    h.seqNum = seqNum;

    bufHist[tid][phys_reg].push_back(h);
}

void
RenameVulCalc::vulOnCommit(InstSeqNum seqNum, int tid)
{
    assert(tid < numThreads);
    for(unsigned i = 0; i < numEntries; ++i) {

        std::list<History>::iterator hit = hist[tid][i].begin();
        std::list<History>::iterator h_end = hist[tid][i].end();

        while(hit != h_end) {
            if(hit->seqNum == seqNum || hit->seqNum == 0) {

                if(hit->op == READ && prevTick[tid][i] != -1) {
                    Tick readt = hit->t;

                    if(((++hit)->op == WRITE))
                       if(hit->t == readt)
                          continue;

                    --hit;
                    renameVul += size*(hit->t - prevTick[tid][i])/TICKS_PER_CYCLE;

                    DPRINTF(VulTracker, "Vultracker: [sn:%i]: Rename map %d commit. Vulnerable from %lu to %lu\n", seqNum, i, prevTick[tid][i], hit->t);

                    DPRINTF(VulTracker,"Vultracker: Rename vul %lu\n", renameVul.value());


                } else if(hit->op == WRITE) {

                    DPRINTF(VulTracker, "Vultracker: [sn:%i]: Rename map %d commit.\n", seqNum, i);

                }
                prevTick[tid][i] = hit->t;
                DPRINTF(VulTracker, "Vultacker: [sn:%i]: Rename map %d setting previous tick %lu\n", seqNum, i, prevTick[tid][i]);

                hit = hist[tid][i].erase(hit);

                continue;
            }

            hit++;

        }

    }

}

void
RenameVulCalc::vulOnCommitHB(InstSeqNum seqNum, int tid)
{
    assert(tid < numThreads);

    for(unsigned i = 0; i < numEntries; ++i) {

        std::list<History>::iterator hit = bufHist[tid][i].begin();
        std::list<History>::iterator h_end = bufHist[tid][i].end();

        while(hit != h_end) {
            
            if(hit->seqNum == seqNum) {

                if(hit->op == READ && hbPrevTick[tid][i] != -1) {

                    histbufVul += size*(hit->t - hbPrevTick[tid][i])/TICKS_PER_CYCLE;

                    DPRINTF(VulTracker, "Vultracker: [sn:%i]: History buffer %d commit. Vulnerable from %lu to %lu\n", seqNum, i, hbPrevTick[tid][i], hit->t);

                    DPRINTF(VulTracker, "Vultracker: History buffer vul %lu\n", histbufVul.value());

                } else if(hit->op == WRITE) {

                    DPRINTF(VulTracker, "Vultracker: [sn:%i]: History buffer %d commit\n", seqNum, i);
                }

                hbPrevTick[tid][i] = hit->t;
                DPRINTF(VulTracker, "Vultracker: [sn:%i]: History buffer %d setting previous tick %lu\n", seqNum, i, hbPrevTick[tid][i]);
                hit = bufHist[tid][i].erase(hit);

                continue;
            }
            hit++;
        }

    }

}

void
RenameVulCalc::vulOnSquash(InstSeqNum seqNum, int tid)
{
    assert(tid < numThreads);
    for(unsigned i = 0; i < numEntries; ++i) {

        std::list<History>::iterator hit = hist[tid][i].begin();
        std::list<History>::iterator h_end = hist[tid][i].end();

        while(hit != h_end) {

            if(hit->seqNum == seqNum) {

                DPRINTF(VulTracker, "Vultracker: [sn:%i]: Rename map %d squash.\n", seqNum, i);

                if(hit->op == READ) {
                    Tick readt = hit++->t;
                    if(hit->op == WRITE && hit->t == readt) {
                        DPRINTF(VulTracker, "Vultracker: [sn:%i]: Rename map %d vulnerable from %lu to %lu\n",
                                    seqNum, i, prevTick[tid][i], readt); 

                        renameVul += size*(readt- prevTick[tid][i])/TICKS_PER_CYCLE;
                        prevTick[tid][i] = readt;
                    }
                    --hit;
                }

                hit = hist[tid][i].erase(hit);

                continue;
            }

            hit++;
        }
    }
}

void
RenameVulCalc::vulOnRemove(InstSeqNum seqNum, int tid)
{
    assert(tid < numThreads);
    for(unsigned i = 0; i < numEntries; ++i) {

        std::list<History>::iterator hit = bufHist[tid][i].begin();
        std::list<History>::iterator h_end = bufHist[tid][i].end();

        while(hit != h_end) {

            if(hit->seqNum == seqNum) {

                DPRINTF(VulTracker, "Vultracker: [sn:%i]: History buffer %d remove.\n", seqNum, i);
                
                if(hit->op == WRITE) {
                    histbufVul += (SEQNUM_WIDTH+PHY_IDX_WIDTH)*(curTick() - hbPrevTick[tid][i])/TICKS_PER_CYCLE;

                    DPRINTF(VulTracker, "Vultracker: [sn:%i]: History buffer %d seqNum, old phys reg Vulnerable from %lu to %lu\n", seqNum, i, hit->t, curTick());
                }

                hit = hist[tid][i].erase(hit);

                continue;
            }

            hit++;
        }
    }
}

void
RenameVulCalc::regStats()
{
    using namespace Stats;

    renameVul
        .name("vulnerability.rename_map")
        .desc("Vulnerability of Rename map in bit-cycles");
    histbufVul
        .name("vulnerability.history_buffer")
        .desc("Vulnerability of History buffer in bit-ticks");
}
