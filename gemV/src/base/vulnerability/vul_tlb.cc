/*
 * Copyright (c) 20014-15 Arizona State University
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met: redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer;
 * redistributions in binary form must reproduce the above copyright
 * notice, this list of conditions and the following disclaimer in the
 * documentation and/or other materials provided with the distribution;
 * neither the name of the copyright holders nor the names of its
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Authors: Srinivas Tanikella
 *
 *	    Compiler and Microarchitecture Lab, ASU
 * 	    http://aviral.lab.asu.edu
 */

#include "base/vulnerability/vul_tlb.hh"

using namespace ArmISA;

void
TlbVulCalc::vulOnRead(TLB *tlb, Addr va)
{
    int size = tlb->getsize();

    TlbEntry *table = tlb->table;

    for(unsigned i = 0; i < size; ++i) {
        History *h = &table[i].history;
        h->op = READ;
        h->t = curTick();
        va = va << table[i].N;

        if(hammingDistance(va, (table[i].vpn << table[i].N) <= 1))
            h->uncertain = curTick() - h->incomingTick;
    }

}

void
TlbVulCalc::vulOnIncoming(TlbEntry *e)
{
    History *h = &e->history;
    h->op = INCOMING;
    h->incomingTick = curTick();
    h->t = h->incomingTick;
    h->uncertain = 0;
}

void
TlbVulCalc::vulOnFlush(TLB *tlb, TlbEntry *e, int flushop, uint64_t asn, Addr mva)
{
    History *h = &e->history;
    h->op = EVICTION;
    h->t = curTick();

    switch(flushop) {
        case FLUSH_ALL:
        {
            tlb->tlbVulnerability += h->uncertain*TLB_ENTRY_SIZE/TICKS_PER_CYCLE;
        }
            break;

        case FLUSH_ASID:
        {
            TlbEntry *table = tlb->table;
            int size = tlb->getsize();
            for(unsigned i = 0; i < size; ++i) {
                History *h = &table[i].history;
                h->op = READ;
                h->t = curTick();
                if(hammingDistance(table->asid, asn) <= 1)
                    h->uncertain = curTick() - h->incomingTick;

                tlb->tlbVulnerability += h->uncertain*TLB_ENTRY_SIZE/TICKS_PER_CYCLE;
            }
        }
            break;
        case FLUSH_MVA_ASID:
        {
            tlb->tlbVulnerability += h->uncertain*TLB_ENTRY_SIZE/TICKS_PER_CYCLE;
        }
            break;
        case FLUSH_MVA:
        {
            TlbEntry *table = tlb->table;
            int size = tlb->getsize();
            for(unsigned i = 0; i < size; ++i) {
                History *h = &table[i].history;
                h->op = READ;
                h->t = curTick();
                Addr v = table[i].vpn << table[i].N;
                if(hammingDistance(v, (mva << table[i].N)) <= 1)
                    h->uncertain = curTick() - h->incomingTick;

                tlb->tlbVulnerability += h->uncertain*TLB_ENTRY_SIZE/TICKS_PER_CYCLE;
            }
        }
            break;
        default:
            break;
    }
}
